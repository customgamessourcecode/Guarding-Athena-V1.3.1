{
	"AddDamageFilterAttacker": {
		"prefix": "AddDamageFilterAttacker",
		"body": [
			"AddDamageFilterAttacker(${caster},${name},function (damage,victim)",
			"\t$0",
			"end)"
		],
		"description": "添加伤害过滤器"
	},
	"AddDamageFilterVictim": {
		"prefix": "AddDamageFilterVictim",
		"body": [
			"AddDamageFilterVictim(${caster},${name},function (damage,attacker)",
			"\t$0",
			"end)"
		],
		"description": "添加伤害过滤器"
	},
	"AddModifierStackCount": {
		"prefix": "AddModifierStackCount",
		"body": [
			"AddModifierStackCount(${caster},${target},${ability},${modiferName},${count},${duration},${independent})"
		],
		"description": "增加modifier叠加数量"
	},
	"CauseDamage": {
		"prefix": "CauseDamage",
		"body": [
			"CauseDamage(${caster},${target},${damage},${damageType},${ability})"
		],
		"description": "造成伤害"
	},
	"ClearBuff": {
		"prefix": "ClearBuff",
		"body": [
			"ClearBuff(${caster},${buffType},${count})"
		],
		"description": "清除buff"
	},
	"CreateSound": {
		"prefix": "CreateSound",
		"body": [
			"CreateSound(${soundName},${caster})"
		],
		"description": "Optional parameters: location,duration,delay"
	},
	"CreateParticle": {
		"prefix": "CreateParticle",
		"body": [
			"CreateParticle(${particleName},${particleAttach},${owningEntity},${duration})"
		],
		"description": "Optional parameters: duration,immediately"
	},
	"CreateLinearProjectile": {
		"prefix": "CreateLinearProjectile",
		"body": [
			"CreateLinearProjectile(${caster},${ability},${particleName},${spawnOrigin},${radius},${distance},${direction},${speed},${deleteOnHit})"
		],
		"description": "Create a linear projectile, return particle id"
	},
	"CreateTrackingProjectile": {
		"prefix": "CreateTrackingProjectile",
		"body": [
			"CreateTrackingProjectile(${caster},${target},${ability},${particleName},${speed})"
		],
		"description": "Optional parameters: dodgeable,vision,visionRadius"
	},
	"CreateNumberEffect": {
		"prefix": "CreateNumberEffect",
		"body": [
			"-- MSG_BLOCK,MSG_ORIT,MSG_DAMAGE,MSG_EVADE,MSG_GOLD,MSG_HEAL,MSG_MANA_ADD,MSG_MANA_LOSS,MSG_MISS,MSG_POISION,MSG_SPELL,MSG_XP",
			"-- red,orange,yellow,green,blue,indigo,purple",
			"CreateNumberEffect(${entity},${number},${duration},${msg_type},${color},${icon_type})"
		],
		"description": "创建一个数字特效"
	},
	"DeepCopy": {
		"prefix": "DeepCopy",
		"body": [
			"DeepCopy(${table})"
		],
		"description": "复制一个表"
	},
	"DropItem": {
		"prefix": "DropItem",
		"body": [
			"DropItem(${item},${hero})"
		],
		"description": "Drop item on unit position, return item"
	},
	"ForWithInterval": {
		"prefix": "ForWithInterval",
		"body": [
			"ForWithInterval(${count},${interval},function ()",
			"\t$0",
			"end)"
		],
		"description": "带延迟for循环"
	},
	"GetExclusive": {
		"prefix": "GetExclusive",
		"body": [
			"GetExclusive(${caster})"
		],
		"description": "获取专属装备"
	},
	"GetUnitsInRadius": {
		"prefix": "GetUnitsInRadius",
		"body": [
			"GetUnitsInRadius(${caster},${ability},${point},${radius})"
		],
		"description": "Get Units In Radius, return unit group"
	},
	"GetUnitsInLine": {
		"prefix": "GetUnitsInLine",
		"body": [
			"GetUnitsInLine(${caster},${ability},${start_point},${end_point},${width})"
		],
		"description": "Find Units In Sector, return unit group"
	},
	"GetUnitsInSector": {
		"prefix": "GetUnitsInSector",
		"body": [
			"GetUnitsInSector(${cacheUnit},${ability},${position},${forwardVector},${angle},${radius})"
		],
		"description": "Find Units In Sector, return unit group"
	},
	"GetRandomPoint": {
		"prefix": "GetRandomPoint",
		"body": [
			"GetRandomPoint(${originPoint},${minRadius},${maxRadius})"
		],
		"description": "获取指定点范围内随机点"
	},
	"GetRandomUnit": {
		"prefix": "GetRandomUnit",
		"body": [
			"GetRandomUnit(${caster},${ability},${originPoint},${radius})"
		],
		"description": "GetRandomUnit"
	},
	"GetRotationPoint": {
		"prefix": "GetRotationPoint",
		"body": [
			"GetRotationPoint(${originPoint},${radius},${angle})"
		],
		"description": "GetRotationPoint"
	},
	"GiveItem": {
		"prefix": "GiveItem",
		"body": [
			"GiveItem(${caster},${itemName})"
		],
		"description": "Optional parameters: itemOwner, return item or false"
	},
	"HasExclusive": {
		"prefix": "HasExclusive",
		"body": [
			"HasExclusive(${caster})"
		],
		"description": "是否拥有专属，返回Boolean"
	},
	"Heal": {
		"prefix": "Heal",
		"body": [
			"Heal(${caster},${heal},${mana},${show})"
		],
		"description": "Heal health and mana"
	},
	"IsFullSolt": {
		"prefix": "IsFullSolt",
		"body": [
			"IsFullSolt(${caster},${heal},${mana},${show})"
		],
		"description": "是否满格"
	},
	"IsModifierType": {
		"prefix": "IsModifierType",
		"body": [
			"IsModifierType(${caster},${buffName},${type})"
		],
		"description": "判断buff类型"
	},
	"ItemTypeCheck": {
		"prefix": "ItemTypeCheck",
		"body": [
			"ItemTypeCheck(${caster},${item})"
		],
		"description": "重复装备类型检查"
	},
	"Jump": {
		"prefix": "Jump",
		"body": [
			"Jump(${caster},${target_location},${speed},${height},${findPath},${callback})"
		],
		"description": "Jump"
	},
	"KnockBack": {
		"prefix": "KnockBack",
		"body": [
			"KnockBack(${caster},${direction},${distance},${duration})"
		],
		"description": "Jump"
	},
	"OnAttackLanded": {
		"prefix": "OnAttackLanded",
		"body": [
			"OnAttackLanded"
		],
		"description": "OnAttackLanded"
	},
	"PropertySystem": {
		"prefix": "PropertySystem",
		"body": [
			"PropertySystem(${caster},${property},${count},${duration})"
		],
		"description": "Optional parameters: duration"
	},
	"PrintTable": {
		"prefix": "PrintTable",
		"body": [
			"PrintTable(${t})"
		],
		"description": "Optional parameters: duration"
	},
	"RemoveDamageFilterAttacker": {
		"prefix": "RemoveDamageFilterAttacker",
		"body": [
			"RemoveDamageFilterAttacker(${caster},${name})"
		],
		"description": "删除伤害过滤器"
	},
	"RemoveDamageFilterVictim": {
		"prefix": "RemoveDamageFilterVictim",
		"body": [
			"RemoveDamageFilterVictim(${caster},${name})"
		],
		"description": "删除伤害过滤器"
	},
	"RemoveHealth": {
		"prefix": "RemoveHealth",
		"body": [
			"RemoveHealth(${caster},${health})"
		],
		"description": "生命移除"
	},
	"RollDrops": {
		"prefix": "RollDrops",
		"body": [
			"RollDrops(${unit})"
		],
		"description": "Drop item on unit position, return item"
	},
	"SetModelScale": {
		"prefix": "SetModelScale",
		"body": [
			"SetModelScale(${caster},${scale},${smooth},${duration})"
		],
		"description": "设置模型大小"
	},
	"SetModifierType": {
		"prefix": "SetModifierType",
		"body": [
			"SetModifierType(${caster},${buffName},${type})"
		],
		"description": "设置buff的类型"
	},
	"SetParticleControl": {
		"prefix": "SetParticleControl",
		"body": [
			"ParticleManager:SetParticleControl( ${p}, ${cp}, ${vector})"
		],
		"description": "设置控制点"
	},
	"SetUnitPosition": {
		"prefix": "SetUnitPosition",
		"body": [
			"SetUnitPosition(${caster},${position})"
		],
		"description": "Set Unit Position"
	},
	"SetUnitDamagePercent": {
		"prefix": "SetUnitDamagePercent",
		"body": [
			"SetUnitDamagePercent(${caster},${percent},${duration})"
		],
		"description": "设置单位伤害输出百分比"
	},
	"SetUnitMagicDamagePercent": {
		"prefix": "SetUnitMagicDamagePercent",
		"body": [
			"SetUnitMagicDamagePercent(${caster},${percent},${duration})"
		],
		"description": "设置单位魔法伤害输出百分比"
	},
	"SetUnitIncomingDamageDeepen": {
		"prefix": "SetUnitIncomingDamageDeepen",
		"body": [
			"SetUnitIncomingDamageDeepen(${caster},${percent},${duration})"
		],
		"description": "设置单位接受伤害加深百分比"
	},
	"SetUnitIncomingDamageReduce": {
		"prefix": "SetUnitIncomingDamageReduce",
		"body": [
			"SetUnitIncomingDamageReduce(${caster},${percent},${duration})"
		],
		"description": "设置单位接受伤害减少百分比"
	},
	"SetCamera": {
		"prefix": "SetCamera",
		"body": [
			"SetCamera(${playerID},${arg})"
		],
		"description": "Set camera on unit or position"
	},
	"SetRegionLimit": {
		"prefix": "SetRegionLimit",
		"body": [
			"SetRegionLimit(${caster},${regionEntity})"
		],
		"description": "Set Region Limit"
	},
	"SetBaseResistance": {
		"prefix": "SetBaseResistance",
		"body": [
			"SetBaseResistance(${caster},${resistance},${duration})"
		],
		"description": "设置单位魔抗"
	},
	"Timers": {
		"prefix": "Timers",
		"body": [
			"Timers:CreateTimer(${1},function ()",
			"\t$0",
			"end)"
		],
		"description": "CreateTimer"
	}
}